{"version":3,"sources":["Minesweeper/getGrid.js","Minesweeper/minesweeperSlice.js","store.js","Minesweeper/Grid/styled.js","common/Field/index.js","Minesweeper/Grid/index.js","Minesweeper/TopBar/index.js","Minesweeper/index.js","App.js","reportWebVitals.js","index.js"],"names":["getGrid","difficultyLevel","grid","fieldsQuantity","minesQuantity","columnsQuantity","i","column","row","push","id","revealed","mine","Math","random","markedAsMine","surroundingMines","coordinates","initiateGrid","minesIndexs","j","max","maxIndex","k","length","map","field","includes","setMinesOnGrid","forEach","gridField","currentSurroundingMines","currentColumn","currentRow","determiningFields","determiningField","targetIndex","findIndex","console","log","minesweeperSlice","createSlice","name","initialState","flaggedFieldsQuantity","gameOver","reducers","setGrid","state","payload","checkIfGameOver","index","fieldsRevealed","setRevealed","setMarkedAsMine","revealSurroundingFields","dependentField","actions","selectGrid","minesweeper","selectDifficultyLevel","selectGameOver","selectFlaggedFieldsQuantity","store","configureStore","reducer","minesweeperReducer","GridWrapper","styled","div","Field","dispatch","useDispatch","clickHandler","event","type","preventDefault","useEffect","onClick","onContextMenu","Grid","useSelector","TopBar","minesLeft","Minesweeper","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAoGeA,EApGC,SAACC,GAEb,IAAMC,EAAO,GAETC,EAAiB,EACjBC,EAAgB,EAChBC,EAAkB,EAEtB,OAAQJ,GACJ,IAAK,WACDE,EAAiB,GACjBC,EAAgB,GAChBC,EAAkB,EAClB,MACJ,IAAK,eACDF,EAAiB,IACjBC,EAAgB,GAChBC,EAAkB,GAgF1B,OA5EqB,WACjB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAgBG,IAAK,CAErC,IAAIC,EAAgB,IAAND,GAAeC,IAAWF,EAAhB,EAAsCE,GAAkB,EAC5EC,EAAa,IAANF,EAAU,EAAKA,EAAID,IAAoB,EAAIG,GAAY,EAAIA,EAEtEN,EAAKO,KACD,CACIC,GAAIJ,EACJK,UAAU,EACVC,KAAMC,KAAKC,SACXC,cAAc,EACdC,iBAAkB,OAClBC,YACA,CACIV,SACAC,UAuDpBU,GAhDuB,WAInB,IAFA,IAAIC,EAAc,GAETC,EAAI,EAAGA,EAAIhB,EAAegB,IAAK,CAKpC,IAHA,IAAIC,EAAMnB,EAAK,GAAGU,KACdU,EAAW,EAENC,EAAI,EAAGA,EAAIrB,EAAKsB,OAAQD,IACzBrB,EAAKqB,GAAGX,KAAOS,IAAwB,IAAjBnB,EAAKqB,GAAGX,OAC9BU,EAAWC,EACXF,EAAMnB,EAAKqB,GAAGX,MAGtBV,EAAKoB,GAAUV,KAAO,EACtBO,EAAYV,KAAKa,GAErBpB,EAAKuB,KAAI,SAACC,GAAD,OAAWP,EAAYQ,SAASD,EAAMhB,IAAMgB,EAAMd,MAAO,EAAOc,EAAMd,MAAO,KA+B1FgB,GA3BI1B,EAAK2B,SAAQ,SAAAC,GAET,IAAIC,EAA0B,EACxBC,EAAgBF,EAAUb,YAAYV,OACtC0B,EAAaH,EAAUb,YAAYT,IAGnC0B,EAAoB,CACtB,SAAAJ,GAAS,OAAIA,EAAUb,YAAYV,SAAWyB,EAAgB,GAAKF,EAAUb,YAAYT,MAAQyB,EAAa,GAC9G,SAAAH,GAAS,OAAIA,EAAUb,YAAYV,SAAWyB,GAAiBF,EAAUb,YAAYT,MAAQyB,EAAa,GAC1G,SAAAH,GAAS,OAAIA,EAAUb,YAAYV,SAAWyB,EAAgB,GAAKF,EAAUb,YAAYT,MAAQyB,EAAa,GAC9G,SAAAH,GAAS,OAAIA,EAAUb,YAAYV,SAAWyB,EAAgB,GAAKF,EAAUb,YAAYT,MAAQyB,GACjG,SAAAH,GAAS,OAAIA,EAAUb,YAAYV,SAAWyB,EAAgB,GAAKF,EAAUb,YAAYT,MAAQyB,GACjG,SAAAH,GAAS,OAAIA,EAAUb,YAAYV,SAAWyB,EAAgB,GAAKF,EAAUb,YAAYT,MAAQyB,EAAa,GAC9G,SAAAH,GAAS,OAAIA,EAAUb,YAAYV,SAAWyB,GAAiBF,EAAUb,YAAYT,MAAQyB,EAAa,GAC1G,SAAAH,GAAS,OAAIA,EAAUb,YAAYV,SAAWyB,EAAgB,GAAKF,EAAUb,YAAYT,MAAQyB,EAAa,IAGlHC,EAAkBL,SAAQ,SAAAM,GACtB,IAAMC,EAAclC,EAAKmC,UAAUF,IAClB,IAAjBC,IAAiD,IAA3BlC,EAAKkC,GAAaxB,OAfGmB,GAAoD,MAiBnGD,EAAUd,iBAAmBe,KAQrCO,QAAQC,IAAIrC,GACJA,GC9FNsC,EAAmBC,YACrB,CACIC,KAAM,cACNC,aAAc,CACV1C,gBAAiB,eACjBC,KAAMF,EAAQ,YACd4C,sBAAuB,EACvBC,UAAU,GAGdC,SAAU,CACNC,QAAS,SAACC,EAAOC,GACbD,EAAM9C,KAAO+C,GAEjBC,gBAAiB,SAACF,EAAD,GAA6B,IAAVtC,EAAS,EAAlBuC,QACjBE,EAAQH,EAAM9C,KAAKmC,WAAU,SAAAX,GAAK,OAAIA,EAAMhB,KAAOA,MAC9B,IAA3BsC,EAAM9C,KAAKiD,GAAOvC,OAAkBoC,EAAMH,UAAW,GAErD,IACIO,EAAiB,EAErBJ,EAAM9C,KAAK2B,SAAQ,SAAAH,IACI,IAAnBA,EAAMf,WAAsByC,GAAkC,MAElEA,IAAmBJ,EAAM9C,KAAKsB,OANR,GAMkCc,QAAQC,IAAI,0BAExEc,YAAa,SAACL,EAAD,GAA6B,IAAVtC,EAAS,EAAlBuC,QACbE,EAAQH,EAAM9C,KAAKmC,WAAU,SAAAX,GAAK,OAAIA,EAAMhB,KAAOA,KACzDsC,EAAM9C,KAAKiD,GAAOxC,UAAW,GAEjC2C,gBAAiB,SAACN,EAAD,GAA6B,IAAVtC,EAAS,EAAlBuC,QACjBE,EAAQH,EAAM9C,KAAKmC,WAAU,SAAAX,GAAK,OAAIA,EAAMhB,KAAOA,KACzD,OAAQsC,EAAM9C,KAAKiD,GAAOpC,cACtB,KAAK,EACDiC,EAAM9C,KAAKiD,GAAOpC,cAAe,EACjCiC,EAAMJ,sBAAwBI,EAAMJ,sBAAwB,EAC5D,MACJ,KAAK,EACDI,EAAM9C,KAAKiD,GAAOpC,cAAe,IAG7CwC,wBAAyB,SAACP,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACP,CACpB,SAAAvB,GAAK,OAAIA,EAAMT,YAAYV,SAAW0C,EAAQ1C,OAAS,GAAKmB,EAAMT,YAAYT,MAAQyC,EAAQzC,IAAM,GACpG,SAAAkB,GAAK,OAAIA,EAAMT,YAAYV,SAAW0C,EAAQ1C,QAAUmB,EAAMT,YAAYT,MAAQyC,EAAQzC,IAAM,GAChG,SAAAkB,GAAK,OAAIA,EAAMT,YAAYV,SAAW0C,EAAQ1C,OAAS,GAAKmB,EAAMT,YAAYT,MAAQyC,EAAQzC,IAAM,GACpG,SAAAkB,GAAK,OAAIA,EAAMT,YAAYV,SAAW0C,EAAQ1C,OAAS,GAAKmB,EAAMT,YAAYT,MAAQyC,EAAQzC,KAC9F,SAAAkB,GAAK,OAAIA,EAAMT,YAAYV,SAAW0C,EAAQ1C,OAAS,GAAKmB,EAAMT,YAAYT,MAAQyC,EAAQzC,KAC9F,SAAAkB,GAAK,OAAIA,EAAMT,YAAYV,SAAW0C,EAAQ1C,OAAS,GAAKmB,EAAMT,YAAYT,MAAQyC,EAAQzC,IAAM,GACpG,SAAAkB,GAAK,OAAIA,EAAMT,YAAYV,SAAW0C,EAAQ1C,QAAUmB,EAAMT,YAAYT,MAAQyC,EAAQzC,IAAM,GAChG,SAAAkB,GAAK,OAAIA,EAAMT,YAAYV,SAAW0C,EAAQ1C,OAAS,GAAKmB,EAAMT,YAAYT,MAAQyC,EAAQzC,IAAM,IAExFqB,SAAQ,SAAA2B,GACpB,IAAMpB,EAAcY,EAAM9C,KAAKmC,UAAUmB,GACzCR,EAAM9C,KAAKkC,KAAiBY,EAAM9C,KAAKkC,GAAazB,UAAW,UAM5E,EAA4F6B,EAAiBiB,QAA5FP,GAAjB,EAAQH,QAAR,EAAiBG,iBAAiBG,EAAlC,EAAkCA,YAAaC,EAA/C,EAA+CA,gBAAiBC,EAAhE,EAAgEA,wBAC1DG,EAAa,SAAAV,GAAK,OAAIA,EAAMW,YAAYzD,MACxC0D,EAAwB,SAAAZ,GAAK,OAAIA,EAAMW,YAAY1D,iBACnD4D,EAAiB,SAAAb,GAAK,OAAIA,EAAMW,YAAYd,UAC5CiB,EAA8B,SAAAd,GAAK,OAAIA,EAAMW,YAAYf,uBACvDJ,IAAf,QC3DeuB,EANDC,YAAe,CACzBC,QAAS,CACLN,YAAaO,K,eCHRC,E,MAAcC,EAAOC,IAAV,oK,OC6BTC,EA3BD,SAAC,GAAyE,IAAvE5D,EAAsE,EAAtEA,GAAIE,EAAkE,EAAlEA,KAAMK,EAA4D,EAA5DA,YAAaN,EAA+C,EAA/CA,SAAUI,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,iBAEtDuD,EAAWC,cAEXC,EAAe,SAACC,GACC,UAAfA,EAAMC,MACND,EAAME,iBACNL,EAASrB,EAAgBxC,IACzB6D,EAASlB,EAAY3C,IACA,IAArBM,GAA0BuD,EAAShB,EAAwBtC,KACrC,gBAAfyD,EAAMC,OACbD,EAAME,iBACNL,EAASjB,EAAgB5C,MAQjC,OAJAmE,qBAAU,YACO,IAAblE,GAA0C,IAArBK,GAA0BuD,EAAShB,EAAwBtC,MACjF,CAACN,IAIA,yBAAQmE,QAASL,EAAcM,cAAeN,EAA9C,cAA8D9D,GAAYK,EAA1E,IAA6FD,GAAgB,eAA7G,IAAoHH,GAAQ,mBCGrHoE,EAxBF,WAET,IAAM9E,EAAO+E,YAAYvB,GAEzB,OAEI,cAACS,EAAD,UAEKjE,EAAKuB,KAAI,SAAAK,GAAS,OAClB,cAAC,EAAD,CAEGpB,GAAIoB,EAAUpB,GACdE,KAAMkB,EAAUlB,KAChBK,YAAaa,EAAUb,YACvBD,iBAAkBc,EAAUd,iBAC5BL,SAAUmB,EAAUnB,SACpBI,aAAce,EAAUf,cANnBe,EAAUpB,UCWhBwE,EAvBA,WACX,IAAMjF,EAAkBgF,YAAYrB,GAC9BhB,EAAwBqC,YAAYnB,GACtC1D,EAAgB,EAEpB,OAAQH,GACJ,IAAK,WACDG,EAAgB,GAChB,MACJ,IAAK,eACDA,EAAgB,GAIxB,IAAM+E,EAAY/E,EAAgBwC,EAElC,OACI,+CACiBuC,MCHVC,EAbK,WAEhB,IAAMvC,EAAWoC,YAAYpB,GAG7B,OACI,qCACI,cAAC,EAAD,KACc,IAAbhB,GAAsB,cAAC,EAAD,KACT,IAAbA,GAAqB,+B,MCLnBwC,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUlC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJmC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8e30a241.chunk.js","sourcesContent":["const getGrid = (difficultyLevel) => {\r\n\r\n    const grid = [];\r\n\r\n    let fieldsQuantity = 0;\r\n    let minesQuantity = 0;\r\n    let columnsQuantity = 0;\r\n\r\n    switch (difficultyLevel) {\r\n        case 'beginner':\r\n            fieldsQuantity = 64;\r\n            minesQuantity = 10;\r\n            columnsQuantity = 8;\r\n            break;\r\n        case 'intermediate':\r\n            fieldsQuantity = 256;\r\n            minesQuantity = 40;\r\n            columnsQuantity = 16;\r\n            break;\r\n    };\r\n\r\n    const initiateGrid = () => {\r\n        for (var i = 0; i < fieldsQuantity; i++) {\r\n\r\n            var column = (i === 0 ? 1 : (column === columnsQuantity ? 1 : column = column + 1));\r\n            var row = (i === 0 ? 1 : (i % columnsQuantity === 0 ? row = row + 1 : row));\r\n\r\n            grid.push(\r\n                {\r\n                    id: i,\r\n                    revealed: false,\r\n                    mine: Math.random(),\r\n                    markedAsMine: false,\r\n                    surroundingMines: \"auto\",\r\n                    coordinates:\r\n                    {\r\n                        column,\r\n                        row,\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    const setMinesOnGrid = () => {\r\n\r\n        var minesIndexs = [];\r\n\r\n        for (var j = 0; j < minesQuantity; j++) {\r\n\r\n            var max = grid[0].mine;\r\n            var maxIndex = 0;\r\n\r\n            for (var k = 1; k < grid.length; k++) {\r\n                if (grid[k].mine > max && grid[k].mine !== true) {\r\n                    maxIndex = k;\r\n                    max = grid[k].mine;\r\n                }\r\n            }\r\n            grid[maxIndex].mine = 0;\r\n            minesIndexs.push(maxIndex);\r\n        }\r\n        grid.map((field) => minesIndexs.includes(field.id) ? field.mine = true : field.mine = false);\r\n    };\r\n\r\n    const setSurroundingMinesNumber = () => {\r\n        grid.forEach(gridField => {\r\n\r\n            var currentSurroundingMines = 0;\r\n            const currentColumn = gridField.coordinates.column;\r\n            const currentRow = gridField.coordinates.row;\r\n            const incrementCurrentSurroundingMines = () => currentSurroundingMines = currentSurroundingMines + 1;\r\n\r\n            const determiningFields = [\r\n                gridField => gridField.coordinates.column === currentColumn - 1 && gridField.coordinates.row === currentRow - 1,\r\n                gridField => gridField.coordinates.column === currentColumn && gridField.coordinates.row === currentRow - 1,\r\n                gridField => gridField.coordinates.column === currentColumn + 1 && gridField.coordinates.row === currentRow - 1,\r\n                gridField => gridField.coordinates.column === currentColumn - 1 && gridField.coordinates.row === currentRow,\r\n                gridField => gridField.coordinates.column === currentColumn + 1 && gridField.coordinates.row === currentRow,\r\n                gridField => gridField.coordinates.column === currentColumn - 1 && gridField.coordinates.row === currentRow + 1,\r\n                gridField => gridField.coordinates.column === currentColumn && gridField.coordinates.row === currentRow + 1,\r\n                gridField => gridField.coordinates.column === currentColumn + 1 && gridField.coordinates.row === currentRow + 1,\r\n            ];\r\n\r\n            determiningFields.forEach(determiningField => {\r\n                const targetIndex = grid.findIndex(determiningField);\r\n                targetIndex !== -1 && grid[targetIndex].mine === true && incrementCurrentSurroundingMines();\r\n            });\r\n            gridField.surroundingMines = currentSurroundingMines;\r\n        });\r\n    };\r\n\r\n    initiateGrid();\r\n    setMinesOnGrid();\r\n    setSurroundingMinesNumber();\r\n\r\n    console.log(grid);\r\n    return (grid);\r\n};\r\n\r\nexport default getGrid;","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport getGrid from \"./getGrid\";\r\n\r\nconst minesweeperSlice = createSlice(\r\n    {\r\n        name: 'minesweeper',\r\n        initialState: {\r\n            difficultyLevel: \"intermediate\",\r\n            grid: getGrid(\"beginner\"),\r\n            flaggedFieldsQuantity: 0,\r\n            gameOver: false,\r\n        },\r\n\r\n        reducers: {\r\n            setGrid: (state, payload) => {\r\n                state.grid = payload;\r\n            },\r\n            checkIfGameOver: (state, { payload: id }) => {\r\n                const index = state.grid.findIndex(field => field.id === id);\r\n                state.grid[index].mine === true && (state.gameOver = true);\r\n\r\n                const minesQuantity = 5;\r\n                var fieldsRevealed = 0;\r\n\r\n                state.grid.forEach(field => {\r\n                    field.revealed === true && (fieldsRevealed = fieldsRevealed + 1);\r\n                });\r\n                fieldsRevealed === state.grid.length - minesQuantity && console.log(\"Wygrałeś!!!\");\r\n            },\r\n            setRevealed: (state, { payload: id }) => {\r\n                const index = state.grid.findIndex(field => field.id === id);\r\n                state.grid[index].revealed = true;\r\n            },\r\n            setMarkedAsMine: (state, { payload: id }) => {\r\n                const index = state.grid.findIndex(field => field.id === id);\r\n                switch (state.grid[index].markedAsMine) {\r\n                    case false:\r\n                        state.grid[index].markedAsMine = true;\r\n                        state.flaggedFieldsQuantity = state.flaggedFieldsQuantity + 1;\r\n                        break;\r\n                    case true:\r\n                        state.grid[index].markedAsMine = false;\r\n                }\r\n            },\r\n            revealSurroundingFields: (state, { payload }) => {\r\n                const dependentFields = [\r\n                    field => field.coordinates.column === payload.column - 1 && field.coordinates.row === payload.row - 1,\r\n                    field => field.coordinates.column === payload.column && field.coordinates.row === payload.row - 1,\r\n                    field => field.coordinates.column === payload.column + 1 && field.coordinates.row === payload.row - 1,\r\n                    field => field.coordinates.column === payload.column - 1 && field.coordinates.row === payload.row,\r\n                    field => field.coordinates.column === payload.column + 1 && field.coordinates.row === payload.row,\r\n                    field => field.coordinates.column === payload.column - 1 && field.coordinates.row === payload.row + 1,\r\n                    field => field.coordinates.column === payload.column && field.coordinates.row === payload.row + 1,\r\n                    field => field.coordinates.column === payload.column + 1 && field.coordinates.row === payload.row + 1,\r\n                ];\r\n                dependentFields.forEach(dependentField => {\r\n                    const targetIndex = state.grid.findIndex(dependentField);\r\n                    state.grid[targetIndex] && (state.grid[targetIndex].revealed = true);\r\n                });\r\n            },\r\n        },\r\n    });\r\n\r\nexport const { setGrid, checkIfGameOver, setRevealed, setMarkedAsMine, revealSurroundingFields } = minesweeperSlice.actions;\r\nexport const selectGrid = state => state.minesweeper.grid;\r\nexport const selectDifficultyLevel = state => state.minesweeper.difficultyLevel;\r\nexport const selectGameOver = state => state.minesweeper.gameOver;\r\nexport const selectFlaggedFieldsQuantity = state => state.minesweeper.flaggedFieldsQuantity;\r\nexport default minesweeperSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport minesweeperReducer from \"./Minesweeper/minesweeperSlice\";\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        minesweeper: minesweeperReducer,\r\n    },\r\n});\r\n\r\nexport default store;","import styled from 'styled-components';\r\n\r\nexport const GridWrapper = styled.div`\r\n\twidth: 500px;\r\n    height: 500px;\r\n    display: grid;\r\n    grid-gap: 2px;\r\n\tgrid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\r\n`;","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setRevealed, setMarkedAsMine, revealSurroundingFields, checkIfGameOver } from \"./../../Minesweeper/minesweeperSlice\";\r\n\r\nconst Field = ({ id, mine, coordinates, revealed, markedAsMine, surroundingMines }) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const clickHandler = (event) => {\r\n        if (event.type === 'click') {\r\n            event.preventDefault();\r\n            dispatch(checkIfGameOver(id));\r\n            dispatch(setRevealed(id));\r\n            surroundingMines === 0 && dispatch(revealSurroundingFields(coordinates));\r\n        } else if (event.type === 'contextmenu') {\r\n            event.preventDefault();\r\n            dispatch(setMarkedAsMine(id));\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        revealed === true && surroundingMines === 0 && dispatch(revealSurroundingFields(coordinates));\r\n    }, [revealed]);\r\n\r\n    return (\r\n\r\n        <button onClick={clickHandler} onContextMenu={clickHandler}> {revealed && surroundingMines} {markedAsMine && \"🚩\"} {mine && \"💣\"}</button>\r\n\r\n    );\r\n};\r\n\r\nexport default Field;","import { useSelector } from \"react-redux\"\r\nimport { GridWrapper } from \"./styled\";\r\nimport Field from \"../../common/Field\";\r\nimport { selectGrid } from \"../minesweeperSlice\";\r\n\r\nconst Grid = () => {\r\n\r\n    const grid = useSelector(selectGrid);\r\n\r\n    return (\r\n\r\n        <GridWrapper>\r\n\r\n            {grid.map(gridField =>\r\n            (<Field\r\n                key={gridField.id}\r\n                id={gridField.id}\r\n                mine={gridField.mine}\r\n                coordinates={gridField.coordinates}\r\n                surroundingMines={gridField.surroundingMines}\r\n                revealed={gridField.revealed}\r\n                markedAsMine={gridField.markedAsMine}\r\n            />))}\r\n\r\n        </GridWrapper>\r\n\r\n    );\r\n};\r\n\r\nexport default Grid;","import { useSelector } from \"react-redux\"\r\nimport { selectDifficultyLevel, selectFlaggedFieldsQuantity } from \"../minesweeperSlice\";\r\n\r\nconst TopBar = () => {\r\n    const difficultyLevel = useSelector(selectDifficultyLevel);\r\n    const flaggedFieldsQuantity = useSelector(selectFlaggedFieldsQuantity);\r\n    let minesQuantity = 0;\r\n\r\n    switch (difficultyLevel) {\r\n        case 'beginner':\r\n            minesQuantity = 10;\r\n            break;\r\n        case 'intermediate':\r\n            minesQuantity = 40;\r\n            break;\r\n    };\r\n\r\n    const minesLeft = minesQuantity - flaggedFieldsQuantity;\r\n\r\n    return (\r\n        <div>\r\n            mines left: {minesLeft}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TopBar;","import { useSelector } from \"react-redux\";\r\nimport Grid from \"./Grid\"\r\nimport { selectGameOver } from \"./minesweeperSlice\";\r\nimport TopBar from \"./TopBar\";\r\n\r\nconst Minesweeper = () => {\r\n\r\n    const gameOver = useSelector(selectGameOver);\r\n\r\n\r\n    return (\r\n        <>\r\n            <TopBar />\r\n            {gameOver === false && <Grid />}\r\n            {gameOver === true && \"PRZEGRAŁEŚ !!!\"}\r\n        </>\r\n    );\r\n};\r\nexport default Minesweeper;","import Minesweeper from \"./Minesweeper\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <Minesweeper />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}